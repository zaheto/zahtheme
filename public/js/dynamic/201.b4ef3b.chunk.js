"use strict";(self.webpackChunk_roots_bud_sage_sage=self.webpackChunk_roots_bud_sage_sage||[]).push([[201],{"./scripts/calculator.js":(a,t,e)=>{e.r(t),jQuery(document).ready((function(a){class t{constructor(){this.models={atlas:{blindsOffset:.045,blindsSpacing:.1,minWidth:.3,maxWidth:3.3},gamma:{blindsOffset:.05,blindsSpacing:.16,minWidth:.3,maxWidth:3.3},sigma:{blindsOffset:.06,blindsSpacing:.08,minWidth:.3,maxWidth:3.3},piramida:{blindsOffset:.06,blindsSpacing:.065,minWidth:.3,maxWidth:3.3}},this.init()}init(){a(".calculator-tab").length&&(this.setupEventListeners(),this.setupToggleButtons(),this.setDefaultValues())}setupEventListeners(){a(".tab-button").on("click",(t=>{const e=a(t.target).data("model");this.switchTab(e)})),Object.keys(this.models).forEach((t=>{a(`#${t}-panel-width-calc, #${t}-panel-height-calc, #${t}-number-of-panels-calc`).on("input change",(()=>{this.calculateModel(t)})),a(`#${t}-panel-width-calc`).on("input",(a=>{this.validateWidth(a,t)}))})),a("#terra-panel-width-calc, #terra-panel-height-calc, #terra-panel-distance-cassettes-calc, #terra-panel-base-distance-calc, #terra-number-of-panels-calc").on("input change",(()=>this.calculateTerra()))}switchTab(t){a(".tab-button").removeClass("active bg-main text-white").addClass("bg-white text-second"),a(`.tab-button[data-model="${t}"]`).removeClass("bg-white text-second").addClass("active bg-main text-white"),a(".calculator-tab").hide().removeClass("active"),a(`#${t}-calculator`).show().addClass("active"),this.calculateModel(t)}calculateModel(a){switch(a){case"atlas":this.calculateAtlas();break;case"gamma":this.calculateGamma();break;case"sigma":this.calculateSigma();break;case"piramida":this.calculatePiramida();break;case"terra":this.calculateTerra()}}calculateAtlas(){const t=parseFloat(a("#atlas-panel-width-calc").val())||0,e=parseFloat(a("#atlas-panel-height-calc").val())||0,l=parseInt(a("#atlas-number-of-panels-calc").val())||0;if(!t||!e||!l)return;const c=Math.max((e-.045)/.1*l,0),s=Math.max((t-.01)*c,0);let i=0;t>1.29&&t<2.1?i=1:t>2.09&&(i=2);const n=i,p=e*i*l,r=this.calculateRivets(c,l,i);a("#atlas-results-calc").html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u0416\u0430\u043b\u044e\u0437\u0438: ${c.toFixed(2)} Pcs, ${s.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u043e\u0442\u043b\u044f\u0432\u043e: ${l} Pcs, ${(e*l).toFixed(3)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u0442\u043e\u0434\u044f\u0441\u043d\u043e: ${l} Pcs, ${(e*l).toFixed(3)} lm</p>\n                <p>\u0425\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0435\u043d \u043f\u0440\u043e\u0444\u0438\u043b U: ${l} Pcs, ${(t*l).toFixed(2)} lm</p>\n                <p>\u0423\u043a\u0440\u0435\u043f\u0432\u0430\u0449 \u043f\u0440\u043e\u0444\u0438\u043b: ${n} Pcs, ${p.toFixed(3)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${r} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*l} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*l+i*l} Pcs</p>\n                <p>\u042a\u0433\u044a\u043b: ${i*l} Pcs</p>\n            `),a("#atlas-calculator-results-calc").removeClass("hidden")}calculateGamma(){const t=parseFloat(a("#gamma-panel-width-calc").val())||0,e=parseFloat(a("#gamma-panel-height-calc").val())||0,l=parseInt(a("#gamma-number-of-panels-calc").val())||0;if(!t||!e||!l)return;const c=Math.max((e-.05)/.16*l,0),s=Math.max((t-.01)*c,0);let i=0;t>1.29&&t<2.1?i=1:t>2.09&&(i=2);const n=i,p=e*i*l,r=this.calculateRivets(c,l,i);a("#gamma-results-calc").html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u0416\u0430\u043b\u044e\u0437\u0438: ${c.toFixed(2)} Pcs, ${s.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u043e\u0442\u043b\u044f\u0432\u043e: ${l} Pcs, ${(e*l).toFixed(3)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u0442\u043e\u0434\u044f\u0441\u043d\u043e: ${l} Pcs, ${(e*l).toFixed(3)} lm</p>\n                <p>\u0425\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0435\u043d \u043f\u0440\u043e\u0444\u0438\u043b U: ${l} Pcs, ${(t*l).toFixed(2)} lm</p>\n                <p>\u0423\u043a\u0440\u0435\u043f\u0432\u0430\u0449 \u043f\u0440\u043e\u0444\u0438\u043b: ${n} Pcs, ${p.toFixed(3)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${r} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*l} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*l+i*l} Pcs</p>\n                <p>\u042a\u0433\u044a\u043b: ${i*l} Pcs</p>\n            `),a("#gamma-calculator-results-calc").removeClass("hidden")}calculateSigma(){const t=parseFloat(a("#sigma-panel-width-calc").val())||0,e=parseFloat(a("#sigma-panel-height-calc").val())||0,l=parseInt(a("#sigma-number-of-panels-calc").val())||0;if(!t||!e||!l)return;const c=Math.max((e-.06)/.08*l,0),s=Math.max((t-.01)*c,0);let i=0;t>1.29&&t<2.1?i=1:t>2.09&&(i=2);const n=i,p=e*i*l,r=this.calculateRivets(c,l,i);a("#sigma-results-calc").html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u0416\u0430\u043b\u044e\u0437\u0438: ${c.toFixed(2)} Pcs, ${s.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u043e\u0442\u043b\u044f\u0432\u043e: ${l} Pcs, ${(e*l).toFixed(3)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u0442\u043e\u0434\u044f\u0441\u043d\u043e: ${l} Pcs, ${(e*l).toFixed(3)} lm</p>\n                <p>\u0425\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0435\u043d \u043f\u0440\u043e\u0444\u0438\u043b U: ${l} Pcs, ${(t*l).toFixed(2)} lm</p>\n                <p>\u0423\u043a\u0440\u0435\u043f\u0432\u0430\u0449 \u043f\u0440\u043e\u0444\u0438\u043b: ${n} Pcs, ${p.toFixed(3)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${r} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*l} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*l+i*l} Pcs</p>\n                <p>\u042a\u0433\u044a\u043b: ${i*l} Pcs</p>\n            `),a("#sigma-calculator-results-calc").removeClass("hidden")}calculatePiramida(){const t=parseFloat(a("#piramida-panel-width-calc").val())||0,e=parseFloat(a("#piramida-panel-height-calc").val())||0,l=parseInt(a("#piramida-number-of-panels-calc").val())||0;if(!t||!e||!l)return;const c=Math.max((e-.06)/.065*l,0),s=Math.max((t-.01)*c,0);let i=0;t>1.29&&t<2.1?i=1:t>2.09&&(i=2);const n=100*Math.ceil(4*(c+1)/l/100)*l;a("#piramida-results-calc").html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u0416\u0430\u043b\u044e\u0437\u0438: ${c.toFixed(2)} Pcs, ${s.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u043e\u0442\u043b\u044f\u0432\u043e: ${l} Pcs, ${(e*l).toFixed(3)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u0442\u043e\u0434\u044f\u0441\u043d\u043e: ${l} Pcs, ${(e*l).toFixed(3)} lm</p>\n                <p>\u0425\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0435\u043d \u043f\u0440\u043e\u0444\u0438\u043b U: ${l} Pcs, ${(t*l).toFixed(2)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${n} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*l} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*l} Pcs</p>\n            `),a("#piramida-calculator-results-calc").removeClass("hidden")}calculateTerra(){const t=parseFloat(a("#terra-panel-width-calc").val())||0,e=parseFloat(a("#terra-panel-height-calc").val())||0,l=parseFloat(a("#terra-panel-distance-cassettes-calc").val())||0,c=parseFloat(a("#terra-panel-base-distance-calc").val())||0,s=parseInt(a("#terra-number-of-panels-calc").val())||0;if(!(t&&e&&l&&c&&s))return;const i=Math.floor((e-c/100)/(.108+l/100)),n=Math.ceil((e-c/100)/(.108+l/100)),p=.108*i+l/100*(i-1)+c/100,r=.108*n+l/100*(n-1)+c/100,o=Math.abs(e-p),d=Math.abs(e-r),h=o<=d?p:r;a("#terra-panel-optimal-height-calc").val(h.toFixed(3));const m=(o<=d?i:n)*s,u=Math.max((t-.01)*m,0),$=Math.round(8*m)>=101?200*s:100*s;a("#terra-results-calc").html(`\n                <p>Profile Cassettes: ${m} Pcs, ${u.toFixed(2)} lm</p>\n                <p>U Profile: ${2*s} Pcs, ${(h*s*2).toFixed(3)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${$} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*s} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*s} Pcs</p>\n            `),a("#terra-calculator-results-calc").removeClass("hidden")}calculateRivets(a,t,e){let l=0;return 0===e?l=4*(a/t+1)*t:1===e?l=5*(a/t+1)*t:2===e&&(l=6*(a/t+1)*t),100*Math.ceil((l+2*e)/t/100)*t}validateWidth(t,e){const l=parseFloat(a(t.target).val()),{minWidth:c,maxWidth:s}=this.models[e];l<c&&a(t.target).val(c)}setDefaultValues(){Object.keys(this.models).forEach((t=>{a(`#${t}-panel-width-calc`).val(1.8),a(`#${t}-panel-height-calc`).find("option:first").prop("selected",!0),a(`#${t}-number-of-panels-calc`).val(1),this.calculateModel(t)})),a("#terra-panel-width-calc").val(1.8),a("#terra-panel-height-calc").val(2),a("#terra-panel-distance-cassettes-calc").val(10),a("#terra-panel-base-distance-calc").val(10),a("#terra-number-of-panels-calc").val(1),this.calculateTerra()}}a(".calculator-tab").length&&new t}))}}]);