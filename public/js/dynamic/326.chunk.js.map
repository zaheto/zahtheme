{"version":3,"file":"js/dynamic/326.chunk.js","mappings":";;;;;;;;;;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","sources":["webpack://@roots/bud/sage/sage/./scripts/atlas-calculator.js"],"sourcesContent":["jQuery(document).ready(function ($) {  // Pass $ as parameter\n    // Hide the results section by default\n    $('#atlas-calculator-results').hide();\n\n    $('.required-materials--toggle-link').on('click', function(e) {\n        e.preventDefault();\n        const resultsSection = $('#atlas-calculator-results');\n        const toggleIcon = $(this).find('.toggle-icon');\n        \n        if (resultsSection.is(':visible')) {\n            resultsSection.slideUp(300, function() {\n                resultsSection.addClass('hidden').css('display', '');\n                toggleIcon.text('+');\n            });\n        } else {\n            resultsSection.removeClass('hidden').slideDown(300, function() {\n                toggleIcon.text('-');\n            });\n        }\n    });\n\n    // Get price elements\n    const priceElement = $('.price');\n    const addToCartButton = $('button.single_add_to_cart_button');\n\n    // Input elements\n    const widthInput = $('#atlas-panel-width');\n    const heightInput = $('#atlas-panel-height');\n    const panelsInput = $('#atlas-number-of-panels');\n\n    // Get the selected predefined size\n    const selectedPredefinedSize = $('.main-product-sizes__item.selected');\n    \n    if (selectedPredefinedSize.length) {\n        const width = selectedPredefinedSize.data('l');\n        const height = selectedPredefinedSize.data('h');\n        const panels = selectedPredefinedSize.data('panels') || 1;\n        \n        // Set initial values\n        widthInput.val(width);\n        heightInput.val(height).trigger('change');\n        panelsInput.val(panels);\n    }\n\n    // Rest of the code remains the same but replace jQuery with $ \n    // Function to check if all inputs have valid values\n    function areInputsValid() {\n        const width = parseFloat(widthInput.val());\n        const height = parseFloat(heightInput.val());\n        const panels = parseInt(panelsInput.val());\n\n        return !isNaN(width) && !isNaN(height) && !isNaN(panels) && \n               width >= parseFloat(widthInput.attr('min')) && \n               width <= parseFloat(widthInput.attr('max')) && \n               panels > 0;\n    }\n\n    // Main calculation function\n    function calculatePrice() {\n        if (!areInputsValid()) return;\n\n        let panelWidth = parseFloat(widthInput.val());\n        let panelHeight = parseFloat(heightInput.val());\n        let numberOfPanels = parseInt(panelsInput.val());\n\n        try {\n\n            // Format width to exactly 2 decimal places\n             const formattedWidth = panelWidth.toFixed(2);\n        \n            // Format height to exactly 3 decimal places without rounding\n            const formattedHeight = (Math.floor(panelHeight * 1000) / 1000).toFixed(3);\n            \n            // Material calculations\n            let blindsProfilePcs = Math.max((panelHeight - 0.045) / 0.1 * numberOfPanels, 0);\n            let blindsProfileLm = Math.max((panelWidth - 0.01) * blindsProfilePcs, 0);\n\n            let uProfileLeftPcs = numberOfPanels;\n            let uProfileLeftLm = panelHeight * numberOfPanels;\n\n            let uProfileRightPcs = numberOfPanels;\n            let uProfileRightLm = panelHeight * numberOfPanels;\n\n            let horizontalUProfilePcs = numberOfPanels;\n            let horizontalUProfileLm = panelWidth * numberOfPanels;\n\n            let F20 = 0;\n            if (panelWidth > 1.29 && panelWidth < 2.1) {\n                F20 = 1;\n            } else if (panelWidth > 2.09) {\n                F20 = 2;\n            }\n            let reinforcingProfilePcs = F20;\n            let reinforcingProfileLm = panelHeight * F20 * numberOfPanels;\n\n            // Updated Rivets calculation\n            let rivetsPcs = 0;\n            if (numberOfPanels > 0) {\n                let innerCalculation = 0;\n                if (F20 == 0) {\n                    innerCalculation = (blindsProfilePcs / numberOfPanels + 1) * 4 * numberOfPanels;\n                } else if (F20 == 1) {\n                    innerCalculation = (blindsProfilePcs / numberOfPanels + 1) * 5 * numberOfPanels;\n                } else if (F20 == 2) {\n                    innerCalculation = (blindsProfilePcs / numberOfPanels + 1) * 6 * numberOfPanels;\n                }\n                rivetsPcs = Math.ceil((innerCalculation + (F20 * 2)) / numberOfPanels / 100) * 100 * numberOfPanels;\n            }\n\n            let selfTappingScrewPcs = numberOfPanels * 10;\n            let dowelsPcs = numberOfPanels * 10 + F20 * numberOfPanels;\n            let cornerPcs = F20 * numberOfPanels;\n\n            // Price Calculations\n            let totalPrice = parseFloat(atlas_pricing.base_price) * blindsProfileLm;\n            //console.log('Base Price:', atlas_pricing.base_price, 'Blinds Profile Lm:', blindsProfileLm, 'Subtotal:', parseFloat(atlas_pricing.base_price) * blindsProfileLm);\n\n\n           // Add essential components\n            totalPrice += uProfileLeftLm * parseFloat(atlas_pricing.price_u_profile_left || 0);\n            \n            //console.log('uProfileLeftLm:', uProfileLeftLm, 'Price U Profile Left:', atlas_pricing.price_u_profile_left, 'Subtotal:', uProfileLeftLm * parseFloat(atlas_pricing.price_u_profile_left || 0));\n\n            totalPrice += uProfileRightLm * parseFloat(atlas_pricing.price_u_profile_right || 0);\n            //console.log('uProfileRightLm:', uProfileRightLm, 'Price U Profile Right:', atlas_pricing.price_u_profile_right, 'Subtotal:', uProfileRightLm * parseFloat(atlas_pricing.price_u_profile_right || 0));\n\n            totalPrice += horizontalUProfileLm * parseFloat(atlas_pricing.price_u_horizontal_panel || 0);\n            //console.log('horizontalUProfileLm:', horizontalUProfileLm, 'Price U Horizontal Panel:', atlas_pricing.price_u_horizontal_panel, 'Subtotal:', horizontalUProfileLm * parseFloat(atlas_pricing.price_u_horizontal_panel || 0));\n\n            totalPrice += reinforcingProfileLm * parseFloat(atlas_pricing.price_reinforcing_profile || 0);\n            //console.log('reinforcingProfileLm:', reinforcingProfileLm, 'Price Reinforcing Profile:', atlas_pricing.price_reinforcing_profile, 'Subtotal:', reinforcingProfileLm * parseFloat(atlas_pricing.price_reinforcing_profile || 0));\n\n            totalPrice += rivetsPcs * parseFloat(atlas_pricing.price_rivets || 0);\n            //console.log('rivetsPcs:', rivetsPcs, 'Price Rivets:', atlas_pricing.price_rivets, 'Subtotal:', rivetsPcs * parseFloat(atlas_pricing.price_rivets || 0));\n\n            totalPrice += selfTappingScrewPcs * parseFloat(atlas_pricing.price_self_tapping_screw || 0);\n            //console.log('selfTappingScrewPcs:', selfTappingScrewPcs, 'Price Self Tapping Screw:', atlas_pricing.price_self_tapping_screw, 'Subtotal:', selfTappingScrewPcs * parseFloat(atlas_pricing.price_self_tapping_screw || 0));\n\n            totalPrice += dowelsPcs * parseFloat(atlas_pricing.price_dowels || 0);\n            //console.log('dowelsPcs:', dowelsPcs, 'Price Dowels:', atlas_pricing.price_dowels, 'Subtotal:', dowelsPcs * parseFloat(atlas_pricing.price_dowels || 0));\n\n            totalPrice += cornerPcs * parseFloat(atlas_pricing.price_corners || 0);\n            //console.log('cornerPcs:', cornerPcs, 'Price Corners:', atlas_pricing.price_corners, 'Subtotal:', cornerPcs * parseFloat(atlas_pricing.price_corners || 0));\n\n            //console.log('Total Price:', totalPrice);\n\n            // Update displayed price\n            priceElement.html(`<span class=\"woocommerce-Price-amount amount\"> \n                <bdi>Крайна цена: ${totalPrice.toFixed(2)}&nbsp;<span class=\"woocommerce-Price-currencySymbol\">лв.</span></bdi>\n            </span>`);\n\n            // Update hidden fields with specific formatting\n            $('#calculated_price').val(totalPrice.toFixed(2));\n            $('#atlas_panel_width').val(formattedWidth);  // Will be like \"1.80\"\n            $('#atlas_panel_height').val(formattedHeight); // Will be like \"1.245\"\n            $('#atlas_number_of_panels').val(numberOfPanels);\n\n            // Update button attributes with same formatting\n            addToCartButton.attr('data-calculated-price', totalPrice.toFixed(2));\n            addToCartButton.attr('data-panel-width', formattedWidth);\n            addToCartButton.attr('data-panel-height', formattedHeight);\n            addToCartButton.attr('data-panels', numberOfPanels);\n\n            // Debug log\n            // Material calculations debug\n            // console.log('Price Calculator Debug:', {\n            //     inputs: {\n            //         width: panelWidth,\n            //         height: panelHeight,\n            //         panels: numberOfPanels,\n            //         formattedWidth: formattedWidth,\n            //         formattedHeight: formattedHeight\n            //     },\n            //     materialCalculations: {\n            //         blindsProfile: {\n            //             pieces: blindsProfilePcs,\n            //             formula: `(${panelHeight} - 0.045) / 0.1 * ${numberOfPanels}`,\n            //             linearMeters: blindsProfileLm,\n            //             formula_lm: `(${panelWidth} - 0.01) * ${blindsProfilePcs}`,\n            //             price: parseFloat(atlas_pricing.base_price) * blindsProfileLm\n            //         },\n            //         uProfileLeft: {\n            //             pieces: uProfileLeftPcs,\n            //             linearMeters: uProfileLeftLm,\n            //             formula: `${panelHeight} * ${numberOfPanels}`,\n            //             price: uProfileLeftLm * parseFloat(atlas_pricing.price_u_profile_left || 0)\n            //         },\n            //         uProfileRight: {\n            //             pieces: uProfileRightPcs,\n            //             linearMeters: uProfileRightLm,\n            //             formula: `${panelHeight} * ${numberOfPanels}`,\n            //             price: uProfileRightLm * parseFloat(atlas_pricing.price_u_profile_right || 0)\n            //         },\n            //         horizontalUProfile: {\n            //             pieces: horizontalUProfilePcs,\n            //             linearMeters: horizontalUProfileLm,\n            //             formula: `${panelWidth} * ${numberOfPanels}`,\n            //             price: horizontalUProfileLm * parseFloat(atlas_pricing.price_u_horizontal_panel || 0)\n            //         },\n            //         reinforcingProfile: {\n            //             pieces: reinforcingProfilePcs,\n            //             F20_condition: `Width ${panelWidth} -> F20 = ${F20}`,\n            //             linearMeters: reinforcingProfileLm,\n            //             formula: `${panelHeight} * ${F20} * ${numberOfPanels}`,\n            //             price: reinforcingProfileLm * parseFloat(atlas_pricing.price_reinforcing_profile || 0)\n            //         },\n            //         rivets: {\n            //             pieces: rivetsPcs,\n            //             formula: `F20=${F20} -> ${(blindsProfilePcs / numberOfPanels + 1) * (F20 == 0 ? 4 : F20 == 1 ? 5 : 6) * numberOfPanels} + (${F20} * 2)`,\n            //             price: rivetsPcs * parseFloat(atlas_pricing.price_rivets || 0)\n            //         },\n            //         selfTappingScrews: {\n            //             pieces: selfTappingScrewPcs,\n            //             formula: `${numberOfPanels} * 10`,\n            //             price: selfTappingScrewPcs * parseFloat(atlas_pricing.price_self_tapping_screw || 0)\n            //         },\n            //         dowels: {\n            //             pieces: dowelsPcs,\n            //             formula: `${numberOfPanels} * 10 + ${F20} * ${numberOfPanels}`,\n            //             price: dowelsPcs * parseFloat(atlas_pricing.price_dowels || 0)\n            //         },\n            //         corners: {\n            //             pieces: cornerPcs,\n            //             formula: `${F20} * ${numberOfPanels}`,\n            //             price: cornerPcs * parseFloat(atlas_pricing.price_corners || 0)\n            //         }\n            //     },\n            //     pricing: {\n            //         basePrice: atlas_pricing.base_price,\n            //         uProfileLeftPrice: atlas_pricing.price_u_profile_left,\n            //         uProfileRightPrice: atlas_pricing.price_u_profile_right,\n            //         horizontalUProfilePrice: atlas_pricing.price_u_horizontal_panel,\n            //         reinforcingProfilePrice: atlas_pricing.price_reinforcing_profile,\n            //         rivetsPrice: atlas_pricing.price_rivets,\n            //         selfTappingScrewPrice: atlas_pricing.price_self_tapping_screw,\n            //         dowelsPrice: atlas_pricing.price_dowels,\n            //         cornersPrice: atlas_pricing.price_corners\n            //     },\n            //     totalPrice: {\n            //         final: totalPrice.toFixed(2),\n            //         breakdown: {\n            //             blindsProfile: parseFloat(atlas_pricing.base_price) * blindsProfileLm,\n            //             uProfileLeft: uProfileLeftLm * parseFloat(atlas_pricing.price_u_profile_left || 0),\n            //             uProfileRight: uProfileRightLm * parseFloat(atlas_pricing.price_u_profile_right || 0),\n            //             horizontalUProfile: horizontalUProfileLm * parseFloat(atlas_pricing.price_u_horizontal_panel || 0),\n            //             reinforcingProfile: reinforcingProfileLm * parseFloat(atlas_pricing.price_reinforcing_profile || 0),\n            //             rivets: rivetsPcs * parseFloat(atlas_pricing.price_rivets || 0),\n            //             selfTappingScrews: selfTappingScrewPcs * parseFloat(atlas_pricing.price_self_tapping_screw || 0),\n            //             dowels: dowelsPcs * parseFloat(atlas_pricing.price_dowels || 0),\n            //             corners: cornerPcs * parseFloat(atlas_pricing.price_corners || 0)\n            //         }\n            //     },\n            //     hiddenFields: {\n            //         calculated_price: $('#calculated_price').val(),\n            //         atlas_panel_width: $('#atlas_panel_width').val(),\n            //         atlas_panel_height: $('#atlas_panel_height').val(),\n            //         atlas_number_of_panels: $('#atlas_number_of_panels').val()\n            //     }\n            // });\n\n\n            // When updating the results, check if they should be visible\n            const resultsSection = $('#atlas-calculator-results');\n            if (!resultsSection.hasClass('hidden')) {\n                resultsSection.show();\n            }\n\n            // Update add to cart button data and hidden input\n            addToCartButton.attr('data-calculated-price', totalPrice.toFixed(2));\n            $('#calculated_price').val(totalPrice.toFixed(2));\n\n            // Display materials\n            $('#atlas-results').html(`\n                <ul>\n                    <li>Профил Жалюзи: <span>${blindsProfilePcs.toFixed(2)} бр. / ${blindsProfileLm.toFixed(2)} лм</span></li>\n                    <li>Профил U отляво: <span>${uProfileLeftPcs} бр. / ${uProfileLeftLm.toFixed(3)} лм</span></li>\n                    <li>Профил U отдясно: <span>${uProfileRightPcs} бр. / ${uProfileRightLm.toFixed(3)} лм</span></li>\n                    <li>Хоризонтален профил U: <span>${horizontalUProfilePcs} бр. / ${horizontalUProfileLm.toFixed(2)} лм</span></li>\n                    <li>Укрепващ профил: <span>${reinforcingProfilePcs} бр. / ${reinforcingProfileLm.toFixed(3)} лм</span></li>\n                    <li>Заклепки: <span>${rivetsPcs} бр.</span></li>\n                    <li>Самонарезни винтове: <span>${selfTappingScrewPcs} бр.</span></li>\n                    <li>Тапи: <span>${dowelsPcs} бр.</span></li>\n                    <li>Ъгъл: <span>${cornerPcs} бр.</span></li>\n                </ul>\n            `);\n\n            $('#atlas-final-price').html(`<p>Крайна цена: ${totalPrice.toFixed(2)} лв.</p>`);\n\n        } catch (error) {\n            console.error(\"An error occurred during calculations: \", error);\n        }\n    }\n\n    // Add event listeners to all inputs\n    widthInput.on('input', calculatePrice);\n    heightInput.on('change', calculatePrice);\n    panelsInput.on('input', calculatePrice);\n\n    // Enable/disable add to cart button based on valid inputs\n    $('input, select').on('input change', function() {\n        if (areInputsValid()) {\n            addToCartButton.prop('disabled', false);\n        } else {\n            addToCartButton.prop('disabled', true);\n        }\n    });\n\n    // Updated predefined sizes click handler\n    $('.main-product-sizes__item').on('click', function(e) {\n        e.preventDefault();\n        \n        // Remove selected class from all items\n        $('.main-product-sizes__item').removeClass('selected');\n        // Add selected class to clicked item\n        $(this).addClass('selected');\n        \n        // Get values from the clicked item\n        const width = $(this).data('l');\n        const height = $(this).data('h');\n        const panels = $(this).data('panels') || 1;\n        \n        // Update form inputs\n        widthInput.val(width);\n        heightInput.val(height).trigger('change');\n        panelsInput.val(panels);\n        \n        // Trigger calculation\n        calculatePrice();\n    });\n\n    // Trigger initial calculation\n    calculatePrice();\n});"],"names":[],"sourceRoot":""}