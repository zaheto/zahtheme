"use strict";(self.webpackChunk_roots_bud_sage_sage=self.webpackChunk_roots_bud_sage_sage||[]).push([[201],{"./scripts/calculator.js":(a,e,l)=>{l.r(e),jQuery(document).ready((function(a){class e{constructor(){console.log("Calculator initialized"),this.models={atlas:{blindsOffset:.045,blindsSpacing:.1,minWidth:.3,maxWidth:3.3},gamma:{blindsOffset:.05,blindsSpacing:.16,minWidth:.3,maxWidth:3.3},sigma:{blindsOffset:.06,blindsSpacing:.08,minWidth:.3,maxWidth:3.3},piramida:{blindsOffset:.06,blindsSpacing:.065,minWidth:.3,maxWidth:3.3}},this.init()}init(){console.log("Initializing calculator"),a(".calculator-tab").length?(this.setupEventListeners(),this.setDefaultValues()):console.log("No calculator tabs found")}setupEventListeners(){console.log("Setting up event listeners"),a(".tab-button").on("click",(e=>{const l=a(e.target).data("model");console.log("Tab clicked:",l),this.switchTab(l)})),Object.keys(this.models).forEach((e=>{console.log("Setting up listeners for model:",e),a(`#${e}-panel-width-calc, #${e}-panel-height-calc, #${e}-number-of-panels-calc`).on("input change",(()=>{console.log(`Input changed for ${e}`),this.calculateModel(e)})),a(`#${e}-panel-width-calc`).on("input",(a=>{console.log(`Validating width for ${e}`),this.validateWidth(a,e)}))})),a("#terra-panel-width-calc, #terra-panel-height-calc, #terra-panel-distance-cassettes-calc, #terra-panel-base-distance-calc, #terra-number-of-panels-calc").on("input change",(()=>{console.log("Terra inputs changed"),this.calculateTerra()}))}switchTab(e){console.log("Switching to tab:",e),a(".tab-button").removeClass("active bg-main text-white").addClass("bg-white text-second"),a(`.tab-button[data-model="${e}"]`).removeClass("bg-white text-second").addClass("active bg-main text-white"),a(".calculator-tab").hide().removeClass("active"),a(`#${e}-calculator`).show().addClass("active"),this.calculateModel(e)}calculateModel(a){switch(console.log("Calculating for model:",a),a){case"atlas":this.calculateStandardModel("atlas");break;case"gamma":this.calculateStandardModel("gamma");break;case"sigma":this.calculateStandardModel("sigma");break;case"piramida":this.calculatePiramida();break;case"terra":this.calculateTerra()}}calculateStandardModel(e){console.log("Calculating standard model:",e);const l=parseFloat(a(`#${e}-panel-width-calc`).val())||0,t=parseFloat(a(`#${e}-panel-height-calc`).val())||0,s=parseInt(a(`#${e}-number-of-panels-calc`).val())||0;if(console.log("Input values:",{width:l,height:t,panels:s}),!l||!t||!s)return void console.log("Missing required values");const c=this.models[e],i=Math.max((t-c.blindsOffset)/c.blindsSpacing*s,0),n=Math.max((l-.01)*i,0);let o=this.calculateF20(l);const r=o,d=t*o*s,p=this.calculateRivets(i,s,o);console.log("Calculated values:",{blindsProfilePcs:i,blindsProfileLm:n,F20:o,reinforcingProfilePcs:r,reinforcingProfileLm:d,rivetsPcs:p});const h=a(`#${e}-results-calc`),u=a(`#${e}-calculator-results-calc`);console.log(`Results container for ${e}:`,{exists:h.length>0,id:`#${e}-results-calc`}),0!==h.length?(h.html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u0416\u0430\u043b\u044e\u0437\u0438: ${i.toFixed(2)} Pcs, ${n.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u043e\u0442\u043b\u044f\u0432\u043e: ${s} Pcs, ${(t*s).toFixed(3)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u0442\u043e\u0434\u044f\u0441\u043d\u043e: ${s} Pcs, ${(t*s).toFixed(3)} lm</p>\n                <p>\u0425\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0435\u043d \u043f\u0440\u043e\u0444\u0438\u043b U: ${s} Pcs, ${(l*s).toFixed(2)} lm</p>\n                <p>\u0423\u043a\u0440\u0435\u043f\u0432\u0430\u0449 \u043f\u0440\u043e\u0444\u0438\u043b: ${r} Pcs, ${d.toFixed(3)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${p} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*s} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*s+o*s} Pcs</p>\n                <p>\u042a\u0433\u044a\u043b: ${o*s} Pcs</p>\n            `),u.removeClass("hidden")):console.error(`Results container for ${e} not found`)}calculatePiramida(){const e=parseFloat(a("#piramida-panel-width-calc").val())||0,l=parseFloat(a("#piramida-panel-height-calc").val())||0,t=parseInt(a("#piramida-number-of-panels-calc").val())||0;if(console.log("Piramida input values:",{width:e,height:l,panels:t}),!e||!l||!t)return void console.log("Missing required values for Piramida");const s=Math.max((l-.06)/.065*t,0),c=Math.max((e-.01)*s,0),i=100*Math.ceil(4*(s+1)/t/100)*t,n=a("#piramida-results-calc");console.log("Piramida results container exists:",n.length>0),n.html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u0416\u0430\u043b\u044e\u0437\u0438: ${s.toFixed(2)} Pcs, ${c.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u043e\u0442\u043b\u044f\u0432\u043e: ${t} Pcs, ${(l*t).toFixed(3)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u0442\u043e\u0434\u044f\u0441\u043d\u043e: ${t} Pcs, ${(l*t).toFixed(3)} lm</p>\n                <p>\u0425\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0435\u043d \u043f\u0440\u043e\u0444\u0438\u043b U: ${t} Pcs, ${(e*t).toFixed(2)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${i} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*t} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*t} Pcs</p>\n            `),a("#piramida-calculator-results-calc").removeClass("hidden")}calculateTerra(){const e=parseFloat(a("#terra-panel-width-calc").val())||0,l=parseFloat(a("#terra-panel-height-calc").val())||0,t=parseFloat(a("#terra-panel-distance-cassettes-calc").val())||0,s=parseFloat(a("#terra-panel-base-distance-calc").val())||0,c=parseInt(a("#terra-number-of-panels-calc").val())||0;if(console.log("Terra input values:",{width:e,height:l,distanceCassettes:t,baseDistance:s,panels:c}),!(e&&l&&t&&s&&c))return void console.log("Missing required values for Terra");const i=Math.floor((l-s/100)/(.108+t/100)),n=Math.ceil((l-s/100)/(.108+t/100)),o=.108*i+t/100*(i-1)+s/100,r=.108*n+t/100*(n-1)+s/100,d=Math.abs(l-o),p=Math.abs(l-r),h=d<=p?o:r;console.log("Terra calculated values:",{G15:i,G16:n,H15:o,H16:r,G17:d,H17:p,optimalHeight:h}),a("#terra-panel-optimal-height-calc").val(h.toFixed(3));const u=(d<=p?i:n)*c,g=Math.max((e-.01)*u,0),m=Math.round(8*u)>=101?200*c:100*c,b=a("#terra-results-calc");console.log("Terra results container exists:",b.length>0),b.html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u043a\u0430\u0441\u0435\u0442\u0438: ${u} Pcs, ${g.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U: ${2*c} Pcs, ${(h*c*2).toFixed(3)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${m} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*c} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*c} Pcs</p>\n            `),a("#terra-calculator-results-calc").removeClass("hidden")}calculateF20(a){return a>2.09?2:a>1.29?1:0}calculateRivets(a,e,l){const t=(a/e+1)*(0===l?4:1===l?5:6)*e;return 100*Math.ceil((t+2*l)/e/100)*e}validateWidth(e,l){const t=parseFloat(a(e.target).val()),{minWidth:s,maxWidth:c}=this.models[l];t<s&&a(e.target).val(s),t>c&&a(e.target).val(c)}setDefaultValues(){console.log("Setting default values"),Object.keys(this.models).forEach((e=>{console.log(`Setting defaults for ${e}`),a(`#${e}-panel-width-calc`).val(1.8),a(`#${e}-panel-height-calc`).find("option:first").prop("selected",!0),a(`#${e}-number-of-panels-calc`).val(1),this.calculateModel(e)})),a("#terra-panel-width-calc").val(1.8),a("#terra-panel-height-calc").val(2),a("#terra-panel-distance-cassettes-calc").val(10),a("#terra-panel-base-distance-calc").val(10),a("#terra-number-of-panels-calc").val(1),this.calculateTerra()}}a(".calculator-tab").length?(console.log("Creating calculator instance"),new e):console.log("No calculator tabs found, skipping initialization")}))}}]);