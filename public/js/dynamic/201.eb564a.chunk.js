"use strict";(self.webpackChunk_roots_bud_sage_sage=self.webpackChunk_roots_bud_sage_sage||[]).push([[201],{"./scripts/calculator.js":(e,a,t)=>{t.r(a),jQuery(document).ready((function(e){class a{constructor(){console.log("Calculator initialized"),console.log("Available Products:",{atlas:window.atlasProducts,gamma:window.gammaProducts,sigma:window.sigmaProducts,piramida:window.piramidaProducts,terra:window.terraProducts}),this.models={atlas:{blindsOffset:.045,blindsSpacing:.1,minWidth:.3,maxWidth:3.3},gamma:{blindsOffset:.05,blindsSpacing:.16,minWidth:.3,maxWidth:3.3},sigma:{blindsOffset:.06,blindsSpacing:.08,minWidth:.3,maxWidth:3.3},piramida:{blindsOffset:.06,blindsSpacing:.065,minWidth:.3,maxWidth:3.3}},this.init()}init(){console.log("Initializing calculator"),e(".calculator-tab").length?(this.setupEventListeners(),this.setDefaultValues()):console.log("No calculator tabs found")}setupEventListeners(){console.log("Setting up event listeners"),e(".tab-button").on("click",(a=>{const t=e(a.target).data("model");console.log("Tab clicked:",t),this.switchTab(t)})),Object.keys(this.models).forEach((a=>{console.log("Setting up listeners for model:",a),e(`#${a}-panel-width-calc, #${a}-panel-height-calc, #${a}-number-of-panels-calc`).on("input change",(()=>{console.log(`Input changed for ${a}`),this.calculateModel(a)})),e(`#${a}-panel-width-calc`).on("input",(e=>{console.log(`Validating width for ${a}`),this.validateWidth(e,a)}))})),e("#terra-panel-width-calc, #terra-panel-height-calc, #terra-panel-distance-cassettes-calc, #terra-panel-base-distance-calc, #terra-number-of-panels-calc").on("input change",(()=>{console.log("Terra inputs changed"),this.calculateTerra()}))}switchTab(a){console.log("Switching to tab:",a),e(".tab-button").removeClass("active bg-main text-white").addClass("bg-white text-second"),e(`.tab-button[data-model="${a}"]`).removeClass("bg-white text-second").addClass("active bg-main text-white"),e(".calculator-tab").hide().removeClass("active"),e(`#${a}-calculator`).show().addClass("active"),this.calculateModel(a)}calculateModel(e){switch(console.log("Calculating for model:",e),e){case"atlas":this.calculateStandardModel("atlas");break;case"gamma":this.calculateStandardModel("gamma");break;case"sigma":this.calculateStandardModel("sigma");break;case"piramida":this.calculatePiramida();break;case"terra":this.calculateTerra()}}calculatePokritiePrices(e,a){return console.log("Calculating pokritie prices for model:",a),console.log("Window products data:",window[`${a}Products`]),window[`${a}Products`]?window[`${a}Products`].map((a=>{console.log("Processing product:",a);const t=this.calculateTotalPrice(e,a);console.log("Calculated total price:",t);const l=a.sale_price?this.calculateTotalPrice(e,a,!0):null;return console.log("Calculated sale price:",l),`\n                    <div class="pokritie-boxes">\n                        <div class="flex justify-between items-center">\n                            <div>\n                                <span class="text-base font-medium">${a.pokritie}</span>\n                                <div class="prices-pokritie">\n                                    ${l?`<del class="text-gray-500">${t.toFixed(2)} \u043b\u0432.</del> \n                                         <span class="text-red-600 ml-2">${l.toFixed(2)} \u043b\u0432.</span>`:`<span>${t.toFixed(2)} \u043b\u0432.</span>`}\n                                </div>\n                            </div>\n                            <a href="${a.link}" class="">\n                                <svg width="40" height="41" viewBox="0 0 40 41" fill="none" xmlns="http://www.w3.org/2000/svg">\n<rect y="0.5" width="40" height="40" rx="5" fill="white"/>\n<path d="M23.5799 20.5C23.5799 22.48 21.9799 24.08 19.9999 24.08C18.0199 24.08 16.4199 22.48 16.4199 20.5C16.4199 18.52 18.0199 16.92 19.9999 16.92C21.9799 16.92 23.5799 18.52 23.5799 20.5Z" stroke="#0F4C81" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>\n<path d="M20.0001 28.7699C23.5301 28.7699 26.8201 26.6899 29.1101 23.0899C30.0101 21.6799 30.0101 19.3099 29.1101 17.8999C26.8201 14.2999 23.5301 12.2199 20.0001 12.2199C16.4701 12.2199 13.1801 14.2999 10.8901 17.8999C9.99009 19.3099 9.99009 21.6799 10.8901 23.0899C13.1801 26.6899 16.4701 28.7699 20.0001 28.7699Z" stroke="#0F4C81" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n\n                            </a>\n                        </div>\n                    </div>\n                `})).join(""):(console.log(`No ${a} products data found`),"")}calculateTotalPrice(e,a){let t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];console.log("Calculate Total Price inputs:",{calculatedData:e,product:a,useSalePrice:t});const l=t&&a.sale_price?parseFloat(a.sale_price):parseFloat(a.price);console.log("Using base price:",l);const c=e.blindsProfileLm*l+e.uProfileLeftLm*a.component_prices.u_profile_left+e.uProfileRightLm*a.component_prices.u_profile_right+e.horizontalProfileLm*a.component_prices.u_horizontal_panel+e.reinforcingProfileLm*a.component_prices.reinforcing_profile+e.rivetsPcs*a.component_prices.rivets+e.selfTappingScrewPcs*a.component_prices.self_tapping_screw+e.dowelsPcs*a.component_prices.dowels+e.cornerPcs*a.component_prices.corners;return console.log("Calculated total:",c),c}calculateStandardModel(a){const t=parseFloat(e(`#${a}-panel-width-calc`).val())||0,l=parseFloat(e(`#${a}-panel-height-calc`).val())||0,c=parseInt(e(`#${a}-number-of-panels-calc`).val())||0;if(!t||!l||!c)return;const i=this.models[a],s=Math.max((l-i.blindsOffset)/i.blindsSpacing*c,0),o=Math.max((t-.01)*s,0);let n=this.calculateF20(t);const r=n,d=l*n*c,p=this.calculateRivets(s,c,n),h={blindsProfileLm:o,uProfileLeftLm:l*c,uProfileRightLm:l*c,horizontalProfileLm:t*c,reinforcingProfileLm:d,rivetsPcs:p,selfTappingScrewPcs:10*c,dowelsPcs:10*c+n*c,cornerPcs:n*c},u=e(`#${a}-results-calc`),m=e(`#${a}-calculator-results-calc`);if(0===u.length)return;u.html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u0416\u0430\u043b\u044e\u0437\u0438: ${s.toFixed(2)} Pcs, ${o.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u043e\u0442\u043b\u044f\u0432\u043e: ${c} Pcs, ${(l*c).toFixed(3)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u0442\u043e\u0434\u044f\u0441\u043d\u043e: ${c} Pcs, ${(l*c).toFixed(3)} lm</p>\n                <p>\u0425\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0435\u043d \u043f\u0440\u043e\u0444\u0438\u043b U: ${c} Pcs, ${(t*c).toFixed(2)} lm</p>\n                <p>\u0423\u043a\u0440\u0435\u043f\u0432\u0430\u0449 \u043f\u0440\u043e\u0444\u0438\u043b: ${r} Pcs, ${d.toFixed(3)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${p} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*c} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*c+n*c} Pcs</p>\n                <p>\u042a\u0433\u044a\u043b: ${n*c} Pcs</p>\n            `);const g=this.calculatePokritiePrices(h,a);g&&e(`#${a}-pokritie-prices`).html(g),m.removeClass("hidden")}calculatePiramida(){const a=parseFloat(e("#piramida-panel-width-calc").val())||0,t=parseFloat(e("#piramida-panel-height-calc").val())||0,l=parseInt(e("#piramida-number-of-panels-calc").val())||0;if(!a||!t||!l)return;const c=Math.max((t-.06)/.065*l,0),i=Math.max((a-.01)*c,0),s=100*Math.ceil(4*(c+1)/l/100)*l,o={blindsProfileLm:i,uProfileLeftLm:t*l,uProfileRightLm:t*l,horizontalProfileLm:a*l,rivetsPcs:s,selfTappingScrewPcs:10*l,dowelsPcs:10*l,cornerPcs:0,reinforcingProfileLm:0};e("#piramida-results-calc").html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u0416\u0430\u043b\u044e\u0437\u0438: ${c.toFixed(2)} Pcs, ${i.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u043e\u0442\u043b\u044f\u0432\u043e: ${l} Pcs, ${(t*l).toFixed(3)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U \u0442\u043e\u0434\u044f\u0441\u043d\u043e: ${l} Pcs, ${(t*l).toFixed(3)} lm</p>\n                <p>\u0425\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0435\u043d \u043f\u0440\u043e\u0444\u0438\u043b U: ${l} Pcs, ${(a*l).toFixed(2)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${s} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*l} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*l} Pcs</p>\n            `);const n=this.calculatePokritiePrices(o,"piramida");n&&e("#piramida-pokritie-prices").html(n),e("#piramida-calculator-results-calc").removeClass("hidden")}calculateTerra(){const a=parseFloat(e("#terra-panel-width-calc").val())||0,t=parseFloat(e("#terra-panel-height-calc").val())||0,l=parseFloat(e("#terra-panel-distance-cassettes-calc").val())||0,c=parseFloat(e("#terra-panel-base-distance-calc").val())||0,i=parseInt(e("#terra-number-of-panels-calc").val())||0;if(!(a&&t&&l&&c&&i))return;const s=Math.floor((t-c/100)/(.108+l/100)),o=Math.ceil((t-c/100)/(.108+l/100)),n=.108*s+l/100*(s-1)+c/100,r=.108*o+l/100*(o-1)+c/100,d=Math.abs(t-n),p=Math.abs(t-r),h=d<=p?n:r;e("#terra-panel-optimal-height-calc").val(h.toFixed(3));const u=(d<=p?s:o)*i,m=Math.max((a-.01)*u,0),g=Math.round(8*u)>=101?200*i:100*i,f={blindsProfileLm:m,uProfileLeftLm:h*i,uProfileRightLm:h*i,horizontalProfileLm:0,rivetsPcs:g,selfTappingScrewPcs:10*i,dowelsPcs:10*i,cornerPcs:0,reinforcingProfileLm:0};e("#terra-results-calc").html(`\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b \u043a\u0430\u0441\u0435\u0442\u0438: ${u} Pcs, ${m.toFixed(2)} lm</p>\n                <p>\u041f\u0440\u043e\u0444\u0438\u043b U: ${2*i} Pcs, ${(h*i*2).toFixed(3)} lm</p>\n                <p>\u0417\u0430\u043a\u043b\u0435\u043f\u043a\u0438: ${g} Pcs</p>\n                <p>\u0421\u0430\u043c\u043e\u043d\u0430\u0440\u0435\u0437\u043d\u0438 \u0432\u0438\u043d\u0442\u043e\u0432\u0435: ${10*i} Pcs</p>\n                <p>\u0422\u0430\u043f\u0438: ${10*i} Pcs</p>\n            `);const P=this.calculatePokritiePrices(f,"terra");P&&e("#terra-pokritie-prices").html(P),e("#terra-calculator-results-calc").removeClass("hidden")}calculateF20(e){return e>2.09?2:e>1.29?1:0}calculateRivets(e,a,t){const l=(e/a+1)*(0===t?4:1===t?5:6)*a;return 100*Math.ceil((l+2*t)/a/100)*a}validateWidth(a,t){const l=parseFloat(e(a.target).val()),{minWidth:c,maxWidth:i}=this.models[t];l<c&&e(a.target).val(c),l>i&&e(a.target).val(i)}setDefaultValues(){Object.keys(this.models).forEach((a=>{e(`#${a}-panel-width-calc`).val(1.8),e(`#${a}-panel-height-calc`).find("option:first").prop("selected",!0),e(`#${a}-number-of-panels-calc`).val(1),this.calculateModel(a)})),e("#terra-panel-width-calc").val(1.8),e("#terra-panel-height-calc").val(2),e("#terra-panel-distance-cassettes-calc").val(10),e("#terra-panel-base-distance-calc").val(10),e("#terra-number-of-panels-calc").val(1),this.calculateTerra()}}e(".calculator-tab").length?new a:console.log("No calculator tabs found, skipping initialization")}))}}]);