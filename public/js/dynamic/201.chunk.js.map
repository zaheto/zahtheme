{"version":3,"file":"js/dynamic/201.chunk.js","mappings":";;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@roots/bud/sage/sage/./scripts/calculator.js"],"sourcesContent":["// File: calculator.js\n\njQuery(document).ready(function ($) {\n    class Calculator {\n        constructor() {\n            console.log('Calculator initialized');\n            this.models = {\n                atlas: {\n                    blindsOffset: 0.045,\n                    blindsSpacing: 0.1,\n                    minWidth: 0.3,\n                    maxWidth: 3.3\n                },\n                gamma: {\n                    blindsOffset: 0.05,\n                    blindsSpacing: 0.16,\n                    minWidth: 0.3,\n                    maxWidth: 3.3\n                },\n                sigma: {\n                    blindsOffset: 0.06,\n                    blindsSpacing: 0.08,\n                    minWidth: 0.3,\n                    maxWidth: 3.3\n                },\n                piramida: {\n                    blindsOffset: 0.06,\n                    blindsSpacing: 0.065,\n                    minWidth: 0.3,\n                    maxWidth: 3.3\n                }\n            };\n\n            this.init();\n        }\n\n        init() {\n            console.log('Initializing calculator');\n            if (!$('.calculator-tab').length) {\n                console.log('No calculator tabs found');\n                return;\n            }\n            \n            this.setupEventListeners();\n            this.setDefaultValues();\n        }\n\n        setupEventListeners() {\n            console.log('Setting up event listeners');\n            \n            // Tab switching\n            $('.tab-button').on('click', (e) => {\n                const model = $(e.target).data('model');\n                console.log('Tab clicked:', model);\n                this.switchTab(model);\n            });\n\n            // Setup input event listeners for all models\n            Object.keys(this.models).forEach(model => {\n                console.log('Setting up listeners for model:', model);\n                \n                // Calculate on any input change\n                $(`#${model}-panel-width-calc, #${model}-panel-height-calc, #${model}-number-of-panels-calc`).on('input change', () => {\n                    console.log(`Input changed for ${model}`);\n                    this.calculateModel(model);\n                });\n\n                // Width validation\n                $(`#${model}-panel-width-calc`).on('input', (e) => {\n                    console.log(`Validating width for ${model}`);\n                    this.validateWidth(e, model);\n                });\n            });\n\n            // Terra specific inputs\n            $('#terra-panel-width-calc, #terra-panel-height-calc, #terra-panel-distance-cassettes-calc, #terra-panel-base-distance-calc, #terra-number-of-panels-calc')\n                .on('input change', () => {\n                    console.log('Terra inputs changed');\n                    this.calculateTerra();\n                });\n        }\n\n        switchTab(model) {\n            console.log('Switching to tab:', model);\n            $('.tab-button').removeClass('active bg-main text-white').addClass('bg-white text-second');\n            $(`.tab-button[data-model=\"${model}\"]`).removeClass('bg-white text-second').addClass('active bg-main text-white');\n            $('.calculator-tab').hide().removeClass('active');\n            $(`#${model}-calculator`).show().addClass('active');\n            this.calculateModel(model);\n        }\n\n        calculateModel(model) {\n            console.log('Calculating for model:', model);\n            \n            switch(model) {\n                case 'atlas':\n                    this.calculateStandardModel('atlas');\n                    break;\n                case 'gamma':\n                    this.calculateStandardModel('gamma');\n                    break;\n                case 'sigma':\n                    this.calculateStandardModel('sigma');\n                    break;\n                case 'piramida':\n                    this.calculatePiramida();\n                    break;\n                case 'terra':\n                    this.calculateTerra();\n                    break;\n            }\n        }\n\n        calculateStandardModel(model) {\n            console.log('Calculating standard model:', model);\n            \n            const width = parseFloat($(`#${model}-panel-width-calc`).val()) || 0;\n            const height = parseFloat($(`#${model}-panel-height-calc`).val()) || 0;\n            const panels = parseInt($(`#${model}-number-of-panels-calc`).val()) || 0;\n\n            console.log('Input values:', { width, height, panels });\n\n            if (!width || !height || !panels) {\n                console.log('Missing required values');\n                return;\n            }\n\n            const modelConfig = this.models[model];\n            const blindsProfilePcs = Math.max((height - modelConfig.blindsOffset) / modelConfig.blindsSpacing * panels, 0);\n            const blindsProfileLm = Math.max((width - 0.01) * blindsProfilePcs, 0);\n\n            let F20 = this.calculateF20(width);\n            const reinforcingProfilePcs = F20;\n            const reinforcingProfileLm = height * F20 * panels;\n            const rivetsPcs = this.calculateRivets(blindsProfilePcs, panels, F20);\n\n            console.log('Calculated values:', {\n                blindsProfilePcs,\n                blindsProfileLm,\n                F20,\n                reinforcingProfilePcs,\n                reinforcingProfileLm,\n                rivetsPcs\n            });\n\n            const resultsContainer = $(`#${model}-results-calc`);\n            const calculatorContainer = $(`#${model}-calculator-results-calc`);\n\n            console.log(`Results container for ${model}:`, {\n                exists: resultsContainer.length > 0,\n                id: `#${model}-results-calc`\n            });\n\n            if (resultsContainer.length === 0) {\n                console.error(`Results container for ${model} not found`);\n                return;\n            }\n\n            resultsContainer.html(`\n                <p>Профил Жалюзи: ${blindsProfilePcs.toFixed(2)} Pcs, ${blindsProfileLm.toFixed(2)} lm</p>\n                <p>Профил U отляво: ${panels} Pcs, ${(height * panels).toFixed(3)} lm</p>\n                <p>Профил U тодясно: ${panels} Pcs, ${(height * panels).toFixed(3)} lm</p>\n                <p>Хоризонтален профил U: ${panels} Pcs, ${(width * panels).toFixed(2)} lm</p>\n                <p>Укрепващ профил: ${reinforcingProfilePcs} Pcs, ${reinforcingProfileLm.toFixed(3)} lm</p>\n                <p>Заклепки: ${rivetsPcs} Pcs</p>\n                <p>Самонарезни винтове: ${panels * 10} Pcs</p>\n                <p>Тапи: ${panels * 10 + F20 * panels} Pcs</p>\n                <p>Ъгъл: ${F20 * panels} Pcs</p>\n            `);\n\n            calculatorContainer.removeClass('hidden');\n        }\n\n        calculatePiramida() {\n            const width = parseFloat($('#piramida-panel-width-calc').val()) || 0;\n            const height = parseFloat($('#piramida-panel-height-calc').val()) || 0;\n            const panels = parseInt($('#piramida-number-of-panels-calc').val()) || 0;\n\n            console.log('Piramida input values:', { width, height, panels });\n\n            if (!width || !height || !panels) {\n                console.log('Missing required values for Piramida');\n                return;\n            }\n\n            const blindsProfilePcs = Math.max((height - 0.06) / 0.065 * panels, 0);\n            const blindsProfileLm = Math.max((width - 0.01) * blindsProfilePcs, 0);\n            const rivetsPcs = Math.ceil(((blindsProfilePcs + 1) * 4) / panels / 100) * 100 * panels;\n\n            const resultsContainer = $('#piramida-results-calc');\n            console.log('Piramida results container exists:', resultsContainer.length > 0);\n\n            resultsContainer.html(`\n                <p>Профил Жалюзи: ${blindsProfilePcs.toFixed(2)} Pcs, ${blindsProfileLm.toFixed(2)} lm</p>\n                <p>Профил U отляво: ${panels} Pcs, ${(height * panels).toFixed(3)} lm</p>\n                <p>Профил U тодясно: ${panels} Pcs, ${(height * panels).toFixed(3)} lm</p>\n                <p>Хоризонтален профил U: ${panels} Pcs, ${(width * panels).toFixed(2)} lm</p>\n                <p>Заклепки: ${rivetsPcs} Pcs</p>\n                <p>Самонарезни винтове: ${panels * 10} Pcs</p>\n                <p>Тапи: ${panels * 10} Pcs</p>\n            `);\n\n            $('#piramida-calculator-results-calc').removeClass('hidden');\n        }\n\n        calculateTerra() {\n            const width = parseFloat($('#terra-panel-width-calc').val()) || 0;\n            const height = parseFloat($('#terra-panel-height-calc').val()) || 0;\n            const distanceCassettes = parseFloat($('#terra-panel-distance-cassettes-calc').val()) || 0;\n            const baseDistance = parseFloat($('#terra-panel-base-distance-calc').val()) || 0;\n            const panels = parseInt($('#terra-number-of-panels-calc').val()) || 0;\n\n            console.log('Terra input values:', {\n                width,\n                height,\n                distanceCassettes,\n                baseDistance,\n                panels\n            });\n\n            if (!width || !height || !distanceCassettes || !baseDistance || !panels) {\n                console.log('Missing required values for Terra');\n                return;\n            }\n\n            const G15 = Math.floor((height - baseDistance / 100) / (0.108 + distanceCassettes / 100));\n            const G16 = Math.ceil((height - baseDistance / 100) / (0.108 + distanceCassettes / 100));\n            const H15 = G15 * 0.108 + (G15 - 1) * (distanceCassettes / 100) + (baseDistance / 100);\n            const H16 = G16 * 0.108 + (G16 - 1) * (distanceCassettes / 100) + (baseDistance / 100);\n            const G17 = Math.abs(height - H15);\n            const H17 = Math.abs(height - H16);\n            const optimalHeight = G17 <= H17 ? H15 : H16;\n\n            console.log('Terra calculated values:', {\n                G15, G16, H15, H16, G17, H17, optimalHeight\n            });\n\n            $('#terra-panel-optimal-height-calc').val(optimalHeight.toFixed(3));\n\n            const profileCassettesPcs = (G17 <= H17 ? G15 : G16) * panels;\n            const profileCassettesLm = Math.max((width - 0.01) * profileCassettesPcs, 0);\n            const rivetsPcs = Math.round(profileCassettesPcs * 8) >= 101 ? panels * 200 : panels * 100;\n\n            const resultsContainer = $('#terra-results-calc');\n            console.log('Terra results container exists:', resultsContainer.length > 0);\n\n            resultsContainer.html(`\n                <p>Профил касети: ${profileCassettesPcs} Pcs, ${profileCassettesLm.toFixed(2)} lm</p>\n                <p>Профил U: ${panels * 2} Pcs, ${(optimalHeight * panels * 2).toFixed(3)} lm</p>\n                <p>Заклепки: ${rivetsPcs} Pcs</p>\n                <p>Самонарезни винтове: ${panels * 10} Pcs</p>\n                <p>Тапи: ${panels * 10} Pcs</p>\n            `);\n\n            $('#terra-calculator-results-calc').removeClass('hidden');\n        }\n\n        calculateF20(width) {\n            if (width > 2.09) return 2;\n            if (width > 1.29) return 1;\n            return 0;\n        }\n\n        calculateRivets(blindsProfilePcs, panels, F20) {\n            const baseFactor = F20 === 0 ? 4 : F20 === 1 ? 5 : 6;\n            const innerCalculation = (blindsProfilePcs / panels + 1) * baseFactor * panels;\n            return Math.ceil((innerCalculation + (F20 * 2)) / panels / 100) * 100 * panels;\n        }\n\n        validateWidth(event, model) {\n            const value = parseFloat($(event.target).val());\n            const { minWidth, maxWidth } = this.models[model];\n            \n            if (value < minWidth) $(event.target).val(minWidth);\n            if (value > maxWidth) $(event.target).val(maxWidth);\n        }\n\n        setDefaultValues() {\n            console.log('Setting default values');\n            \n            // Set defaults for standard models\n            Object.keys(this.models).forEach(model => {\n                console.log(`Setting defaults for ${model}`);\n                $(`#${model}-panel-width-calc`).val(1.8);\n                $(`#${model}-panel-height-calc`).find('option:first').prop('selected', true);\n                $(`#${model}-number-of-panels-calc`).val(1);\n                this.calculateModel(model);\n            });\n\n            // Set defaults for Terra model\n            $('#terra-panel-width-calc').val(1.8);\n            $('#terra-panel-height-calc').val(2.0);\n            $('#terra-panel-distance-cassettes-calc').val(10);\n            $('#terra-panel-base-distance-calc').val(10);\n            $('#terra-number-of-panels-calc').val(1);\n            this.calculateTerra();\n        }\n    }\n\n    // Initialize calculator\n    if ($('.calculator-tab').length) {\n        console.log('Creating calculator instance');\n        new Calculator();\n    } else {\n        console.log('No calculator tabs found, skipping initialization');\n    }\n});"],"names":[],"sourceRoot":""}